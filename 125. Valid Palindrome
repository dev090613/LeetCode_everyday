![image-20230611134227749](/Users/isntsoo/Library/Application Support/typora-user-images/image-20230611134227749.png)

# Intuition
Extra memory를 사용하는 방법(new string 선언)과 사용하지 않는 방법(two pointer) 모두 작성했다. 공부용으로는 사용하지 않는 방법이 좋다.

# Approach
alphabet 또는 number 여부를 판단하는 function을 만들었다. alphaNum이 아닌 경우에는 pointer를 계속 이동한다. alphaNum인 경우 각각의 lower case를 비교한다.

# Complexity
- Time complexity: O(n)

- Space complexity: O(1)

# Code
```python
# Input: s = "A man, a plan, a canal: Panama"
# Output: true
class Solution:
    def isPalindrome(self, s: str) -> bool:
        """
        Pythonic
        built-in solution
        extra memory
        """
        newStr = ""
        for i in range(len(s)):
            if s[i].isalnum():
                newStr += s[i].lower()
        return newStr == newStr[::-1]


    def isPalindrome(self, s: str) -> bool:
        """
        interview solution
        No extra memory
        """
        l, r = 0, len(s)-1

        # print(s[0].isalnum())
        while l < r:
            while l < r and not self.alphaNum(s[l]):
                l += 1
            while l < r and not self.alphaNum(s[r]):
                r -= 1            
            if s[l].lower() != s[r].lower():
                return False
            l, r = l + 1, r - 1
        return True

    def alphaNum(self, c):
        return (ord('A') <= ord(c) <= ord('Z') or
        ord('a') <= ord(c) <= ord('z') or
        ord('0') <= ord(c) <= ord('9'))
```